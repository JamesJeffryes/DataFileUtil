############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class DataFileUtil(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def shock_to_file(self, params, context=None):
        """
        :param params: instance of type "ShockToFileParams" -> structure:
           parameter "shock_id" of String, parameter "file_path" of String
        :returns: instance of type "ShockToFileOutput" -> structure:
           parameter "node_file_name" of String, parameter "attributes" of
           mapping from String to String
        """
        return self._client.call_method(
            'DataFileUtil.shock_to_file',
            [params], self._service_ver, context)

    def file_to_shock(self, params, context=None):
        """
        :param params: instance of type "FileToShockParams" -> structure:
           parameter "file_path" of String, parameter "attributes" of mapping
           from String to String
        :returns: instance of type "FileToShockOutput" -> structure:
           parameter "shock_id" of String
        """
        return self._client.call_method(
            'DataFileUtil.file_to_shock',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('DataFileUtil.status',
            [], self._service_ver, context)
